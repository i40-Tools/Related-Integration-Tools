/*
 * $Id: SKOSRendererVisitor.java 2088 2015-10-23 13:26:27Z euzenat $
 *
 * Copyright (C) INRIA, 2003-2004, 2006-2010, 2012, 2014-2015
 * Copyright (C) Quentin Reul, 2008
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 */

package fr.inrialpes.exmo.align.impl.renderer; 

import java.util.Properties;
import java.io.PrintWriter;
import java.net.URI;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.semanticweb.owl.align.Alignment;
import org.semanticweb.owl.align.AlignmentVisitor;
import org.semanticweb.owl.align.AlignmentException;
import org.semanticweb.owl.align.Cell;
import org.semanticweb.owl.align.Relation;

import fr.inrialpes.exmo.align.impl.ObjectAlignment;

import fr.inrialpes.exmo.ontowrap.LoadedOntology;
import fr.inrialpes.exmo.ontowrap.OntowrapException;

/**
 * Renders an alignment as a new ontology merging these.
 *
 * @author Jérôme Euzenat
 * @version $Id: SKOSRendererVisitor.java 2088 2015-10-23 13:26:27Z euzenat $ 
 */

public class SKOSRendererVisitor extends IndentedRendererVisitor implements AlignmentVisitor {
    final static Logger logger = LoggerFactory.getLogger(SKOSRendererVisitor.class);

    Alignment alignment = null;
    LoadedOntology<Object> onto1 = null;
    LoadedOntology<Object> onto2 = null;
    Cell cell = null;
    boolean embedded = false; // if the output is XML embeded in a structure
    boolean pre2008 = false; // compatibility mode with SKOS early drafts

    public SKOSRendererVisitor( PrintWriter writer ){
	super( writer );
    }

    public void init( Properties p ) {
	if ( p.getProperty( "embedded" ) != null 
	     && !p.getProperty( "embedded" ).equals("") ) embedded = true;
	if ( p.getProperty( "pre2008" ) != null 
	     && !p.getProperty( "pre2008" ).equals("") ) pre2008 = true;
    };

    public void visit( Alignment align ) throws AlignmentException {
	if ( subsumedInvocableMethod( this, align, Alignment.class ) ) return;
	// default behaviour
	alignment = align;
	if ( align instanceof ObjectAlignment ) {
	    onto1 = ((ObjectAlignment)align).getOntologyObject1();
	    onto2 = ((ObjectAlignment)align).getOntologyObject2();
	}
	if ( embedded == false ) {
	    indentedOutputln("<?xml version='1.0' encoding='utf-8' standalone='no'?>");
	}
	indentedOutputln("<rdf:RDF");
	increaseIndent();
	indentedOutputln("xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\""); 
	indentedOutputln("xmlns:rdfs=\"http://www.w3.org/2000/01/rdf-schema#\"");
	if ( pre2008 ) {
	    indentedOutputln("xmlns:skos=\"http://www.w3.org/2004/02/skos/core#\">\n");
	} else {
	    indentedOutputln("xmlns:skos=\"http://www.w3.org/2008/05/skos#\">\n");
	}
	indentedOutputln("<!-- Generated by fr.inrialpes.exmo.impl.renderer.SKOSRendererVisitor -->");
	for ( String[] ext : align.getExtensions() ){
	    indentedOutputln("<!-- "+ext[1]+": "+ext[2]+" -->");
	}
	outputln();
	for( Cell c : align ){
	    c.accept( this );
	} //end for
	decreaseIndent();
	indentedOutputln("</rdf:RDF>");
    }

    public URI getURI2() throws AlignmentException {
	if ( onto2 != null ) {
	    try {
		return onto2.getEntityURI( cell.getObject2() );
	    } catch ( OntowrapException owex ) {
		throw new AlignmentException( "Cannot find entity URI", owex );
	    }
	} else {
	    return cell.getObject2AsURI( alignment );
	}
    }

    public void visit( Cell cell ) throws AlignmentException {
	if ( subsumedInvocableMethod( this, cell, Cell.class ) ) return;
	// default behaviour
	this.cell = cell;
	if ( onto1 != null ) {
	    try {
		indentedOutputln("<skos:Concept rdf:about=\""+onto1.getEntityURI( cell.getObject1() )+"\">");
	    } catch ( OntowrapException owex ) {
		throw new AlignmentException( "Cannot find entity URI", owex );
	    }
	} else {
	    indentedOutputln("<skos:Concept rdf:about=\""+cell.getObject1AsURI( alignment )+"\">");
	}
	increaseIndent();
	String relation = getRelationName( cell.getRelation() );
	indentedOutputln("<"+relation+" rdf:resource=\""+getURI2()+"\"/>");
	decreaseIndent();
	indentedOutputln("</skos:Concept>\n");
    }

   public String getRelationName( Relation rel ) throws AlignmentException {
       if ( pre2008 ) {
	   if ( RelationTransformer.isEquivalence( rel ) ) return "skos:related";
	   else if ( RelationTransformer.isSubsumedOrEqual( rel ) ) return "skos:broader";
	   else if ( RelationTransformer.subsumesOrEqual( rel ) ) return "skos:narrower";
	   else rel.accept( this );
       } else {
	   if ( RelationTransformer.isEquivalence( rel ) ) return "skos:exactMatch";
	   else if ( RelationTransformer.isSubsumedOrEqual( rel ) ) return "skos:broadMatch";
	   else if ( RelationTransformer.subsumesOrEqual( rel ) ) return "skos:narrowMatch";
	   else rel.accept( this );
       }
       return null;
    }

    public void visit( Relation rel ) throws AlignmentException {
	if ( subsumedInvocableMethod( this, rel, Relation.class ) ) return;
	// default behaviour
	throw new AlignmentException( "Cannot render relation "+rel );
    }
}
