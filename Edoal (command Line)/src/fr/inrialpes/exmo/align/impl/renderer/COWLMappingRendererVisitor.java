/*
 * $Id: COWLMappingRendererVisitor.java 2116 2016-09-19 08:38:32Z euzenat $
 *
 * Copyright (C) INRIA, 2003-2004, 2007-2010, 2012-2016
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 */

package fr.inrialpes.exmo.align.impl.renderer; 

import java.net.URI;
import java.util.Properties;
import java.io.PrintWriter;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.semanticweb.owl.align.Alignment;
import org.semanticweb.owl.align.AlignmentVisitor;
import org.semanticweb.owl.align.AlignmentException;
import org.semanticweb.owl.align.Cell;
import org.semanticweb.owl.align.Relation;

import fr.inrialpes.exmo.align.impl.ObjectAlignment;
import fr.inrialpes.exmo.align.impl.URIAlignment;

import fr.inrialpes.exmo.ontowrap.LoadedOntology;
import fr.inrialpes.exmo.ontowrap.OntowrapException;

/**
 * Renders an alignment as a new ontology merging these.
 *
 * @author Jérôme Euzenat
 * @version $Id: COWLMappingRendererVisitor.java 2116 2016-09-19 08:38:32Z euzenat $ 
 */

public class COWLMappingRendererVisitor extends IndentedRendererVisitor implements AlignmentVisitor {
    final static Logger logger = LoggerFactory.getLogger(COWLMappingRendererVisitor.class);

    Alignment alignment = null;
    LoadedOntology<?> onto1 = null;
    LoadedOntology<?> onto2 = null;
    Cell cell = null;

    public COWLMappingRendererVisitor( PrintWriter writer ){
	super( writer );
    }

    public void init( Properties p ) {
	super.init( p );
    }

    public void visit( Alignment align ) throws AlignmentException {
	if ( subsumedInvocableMethod( this, align, Alignment.class ) ) return;
	// default behaviour
	if ( align instanceof ObjectAlignment ) {
	    alignment = align;
	} else {
	    try {
		alignment = ObjectAlignment.toObjectAlignment( (URIAlignment)align );
	    } catch ( AlignmentException alex ) {
		throw new AlignmentException("COWLMappingRenderer: cannot render simple alignment. Need an ObjectAlignment", alex );
	    }
	}
	onto1 = (LoadedOntology<?>)((ObjectAlignment)alignment).getOntologyObject1();
	onto2 = (LoadedOntology<?>)((ObjectAlignment)alignment).getOntologyObject2();
	indentedOutputln("<rdf:RDF");
	increaseIndent();
	increaseIndent();
	indentedOutputln("xmlns:owl=\"http://www.w3.org/2002/07/owl#\"");
	indentedOutputln("xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"");
	indentedOutputln("xmlns:rdfs=\"http://www.w3.org/2000/01/rdf-schema#\" ");
	indentedOutputln("xmlns:cowl=\"http://www.itc.it/cowl#\" ");
	indentedOutputln("xml:base=\"http://www.itc.it/cowl#\" ");
	indentedOutputln("xmlns:xsd=\"http://www.w3.org/2001/XMLSchema#\">\n");	
	decreaseIndent();
	indentedOutputln("<cowl:Mapping rdf:ID=\"\">");
	increaseIndent();
	indentedOutputln("<rdfs:comment>Generated by fr.inrialpes.exmo.impl.renderer.COWLMappingRendererVisitor</rdfs:comment>");
	for ( String[] ext : align.getExtensions() ){
	    indentedOutputln("<rdfs:comment>"+ext[1]+": "+ext[2]+"</rdfs:comment>");
	}
	outputln();

	indentedOutputln("<cowl:sourceOntology>");
	increaseIndent();
	indentedOutputln("<owl:Ontology rdf:about=\""+onto1.getURI()+"\"/>");
	decreaseIndent();
	indentedOutputln("</cowl:sourceOntology>");
	indentedOutputln("<cowl:targetOntology>");
	increaseIndent();
	indentedOutputln("<owl:Ontology rdf:about=\""+onto2.getURI()+"\"/>");
	decreaseIndent();
	indentedOutputln("</cowl:targetOntology>");
	for( Cell c : alignment ){
	    c.accept( this );
	} //end for
	decreaseIndent();
	indentedOutputln("</cowl:Mapping>");
	decreaseIndent();
	indentedOutputln("</rdf:RDF>");
    }

    public void visit( Cell cell ) throws AlignmentException {
	if ( subsumedInvocableMethod( this, cell, Cell.class ) ) return;
	// default behaviour
	this.cell = cell;
	String relationName = getRelationName( cell.getRelation() );
	if ( relationName == null ) throw new AlignmentException( "Cannot render Relation "+cell.getRelation() );
	indentedOutputln("<cowl:bridgeRule>");
	increaseIndent();
	indentedOutputln("<"+relationName+">");
	increaseIndent();
	indentedOutputln("<cowl:source>");
	printObject(cell.getObject1(),onto1);
	indentedOutputln("</cowl:source>");
	indentedOutputln("<cowl:target>");
	printObject(cell.getObject2(),onto2);
	indentedOutputln("</cowl:target>");
	decreaseIndent();
	indentedOutputln("</"+relationName+">");
	decreaseIndent();
	indentedOutputln("</cowl:bridgeRule>");
    }

    public void visit( Relation rel ) throws AlignmentException {
	throw new AlignmentException( "Cannot render generic relation "+rel );
    }

    public static String getRelationName( Relation rel ) throws AlignmentException {
	if ( RelationTransformer.isEquivalence( rel ) ) return "cowl:Equivalent";
	else if ( RelationTransformer.isSubsumedOrEqual( rel ) ) return "cowl:Onto";
	else if ( RelationTransformer.subsumesOrEqual( rel ) ) return "cowl:Into";
	else if ( RelationTransformer.isDisjoint( rel ) ) return "cowl:INCOMPATIBLE";
	// COWL?
	// isInstanceOf(), hasInstance()
	else return null;
    }

    public void printObject( Object ob, LoadedOntology<?> onto ) throws AlignmentException {
	try {
	    increaseIndent();
	    if ( onto.isClass( ob )  ) {
		indentedOutputln("<owl:Class rdf:about=\""+onto.getEntityURI(ob)+"\"/>");
	    } else if ( onto.isDataProperty( ob ) ) { 
		indentedOutputln("<owl:DataProperty rdf:about=\""+onto.getEntityURI(ob)+"\"/>");
	    } else if ( onto.isObjectProperty( ob ) ) { 
		indentedOutputln("<owl:ObjectProperty rdf:about=\""+onto.getEntityURI(ob)+"\"/>");
	    } else if ( onto.isIndividual( ob ) ) {
		indentedOutputln("<owl:Individual rdf:about=\""+onto.getEntityURI(ob)+"\"/>");
	    }
	} catch ( OntowrapException owex ) {
	    throw new AlignmentException( "Cannot find entity URI", owex );
	} finally {
	    decreaseIndent();
	}
    }
}
